heroku deployment :- 

signup
login
create project in heroku 
install heroku cli 
type heroku in cmd

now execute command 
	heroku login 

 	heroku git add 
	git push heroku master 
	heroku open 

it will open your remote url 
https://exp-tracker-22.herokuapp.com/

now you can acess your url with remote url 
https://exp-tracker-22.herokuapp.com/signup 

if you net get your url and got error , then run 
	heroku logs --tail 

above command will help you to identify the errors 
if we got H14 - no web process running

then we need to add 1 file 
	filename => Procfile  [ note : we dont have any extension in this file name ]
create Procfile in root directory of yr project and copy paste below line. 

web: java -Dserver.port=$PORT -jar target/*.war

now 
	git add Procfile
	git commit -m "proc" Procfile 
	git push heroku master 

	now check your project is running.....


now open heroku resources tab click on pg database -> it wil open new page -> 
where you get all the db credentials. 
modify in application.properties with live db credentials. 

now again git commit and heroku push so it re-deplo app with latest changes. 


now lets learn how to create table in live db ? 
pgadmin -> heroku db --> connect 


--------------------------------------------
sts -> 
web*

devtools
pg driver 
spring data jpa  [ jdbc ] 


1) crud 
2) mapping
3) mapping using inheritance 

--------------------------------------------
mapping 
relation

-----------------
1) 

1st time 
git init 
git add remote origin 
add
commit
push

ABC: pull 


DEF : changes 
add,commit,push 


2)
1st time 
git clone https://github.com/tejasshah2k19/ism-web-2022.git
sts -> file -> import ->existing maven project -> browse -> 
do right click on project -> maven update project with force option 

ABC : changes 
add - commit - push 


DEF : pull 
 




User

@ManyToOne
@JoinColumn(name="roleId")
RoleBean role; 

Role 
	@OneToMany(mappedBy="role") 
	Set<UserBean> users;
	
	
	
User 
	@OneToMany(mappedBy="user") 
	Set<AccountBean> accounts; 
	
Account 
	
	@ManyToOne
	@JoinColumn(name="userId")
	UserBean user; 



















 

